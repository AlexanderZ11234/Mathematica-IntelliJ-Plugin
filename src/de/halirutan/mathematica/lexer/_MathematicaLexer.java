/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.halirutan.mathematica.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.LinkedList;
import de.halirutan.mathematica.parsing.MathematicaElementTypes;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Mathematica.flex</tt>
 */
class _MathematicaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_STRING = 4;
  public static final int PUT_START = 6;
  public static final int PUT_RHS = 8;
  public static final int GET_START = 10;
  public static final int GET_RHS = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13792 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\25\1\30\4\13\1\30\1\142\1\143\1\16\1\13\1\16\1\13"+
    "\1\16\1\143\1\71\3\13\1\144\1\1\1\145\1\114\2\1\1\114\5\13\1\27\2\13\1\146"+
    "\4\13\1\40\1\13\1\147\2\1\1\65\1\13\1\150\1\47\2\13\1\151\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\152\5\1\1\107\2\13\1\144\1\153\1\114"+
    "\2\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\144\1\1\1\156\1\42\1\13\1"+
    "\150\6\1\1\157\1\160\14\13\4\1\21\13\1\140\2\13\1\140\1\161\1\13\1\150\3\13"+
    "\1\162\1\163\1\164\1\124\1\163\2\1\1\165\4\1\1\166\1\1\1\124\6\1\1\167\1\170"+
    "\1\171\1\172\1\173\3\1\1\174\147\1\2\13\1\147\2\13\1\147\10\13\1\175\1\176"+
    "\2\13\1\132\3\13\1\177\1\1\1\13\1\112\4\200\4\1\1\105\35\1\1\201\2\1\1\202"+
    "\1\25\4\13\1\203\1\25\4\13\1\133\1\107\1\13\1\150\1\25\4\13\1\147\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\150\20\13\1\124\1\13\1\204\1\1\2\13\1\147\1\105\1\13\1\150\4\13\1\40\2\1"+
    "\1\205\1\206\5\13\1\207\1\13\1\150\1\27\3\1\1\205\1\210\1\13\1\31\1\1\3\13"+
    "\1\144\1\206\2\13\1\144\1\1\1\114\1\1\1\211\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\212\1\213\2\13\1\46\1\1\1\214\1\114"+
    "\1\13\1\215\3\13\1\216\1\217\1\220\1\30\1\66\1\221\1\222\1\200\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\144\1\13\1\223\2\13\1\151\20\1\26\13\1\150\6"+
    "\13\1\77\2\1\1\112\1\224\1\56\1\225\1\226\6\13\1\16\1\1\1\154\25\13\1\150"+
    "\1\1\4\13\1\206\2\13\1\27\2\1\1\151\7\1\1\212\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\227\4\13\1\147\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\234\2\13\1\40"+
    "\1\13\1\150\2\13\1\235\3\1\11\13\1\150\1\114\5\1\2\13\1\27\3\13\1\144\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\236\2\13\1\237\1\13\1\40\1\13\1\112\1\13"+
    "\1\147\4\1\1\13\1\240\1\13\1\40\1\13\1\77\4\1\3\13\1\241\4\1\1\71\1\242\1"+
    "\13\1\144\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\154"+
    "\2\13\1\27\2\1\1\65\1\1\1\154\2\13\2\1\1\13\1\46\1\114\1\154\1\13\1\112\1"+
    "\65\1\1\2\13\1\243\1\154\2\13\1\31\1\244\1\245\2\1\1\13\1\22\1\151\5\1\1\246"+
    "\1\247\1\46\2\13\1\147\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\250\1\16\21\1\3"+
    "\13\1\1\1\251\1\114\12\1\2\13\1\147\2\1\1\252\2\1\3\13\1\1\1\253\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\144\53\1\2\13\1\147\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\147\1\114\6\1\1\13\1\150\1\1\3\13\1\1\1\144\1\114"+
    "\1\154\1\254\1\13\67\1\4\13\1\47\1\71\3\1\1\154\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\212\3\13\1\143\1\255\1\256\1\257\3\13\1\260\1\261"+
    "\1\13\1\262\1\263\1\36\24\13\1\264\1\13\1\36\1\133\1\13\1\133\1\13\1\212\1"+
    "\13\1\212\1\147\1\13\1\147\1\13\1\56\1\13\1\56\1\13\1\265\3\266\14\13\1\47"+
    "\123\1\1\257\1\13\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\151\1\276\1"+
    "\151\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\150\150\13\1\16\25\1\41\13\1"+
    "\150\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\54\1\55\1\2\22\0\1\57\1\44\1\30\1\27\1\7\1\31\1\52\1\53\1"+
    "\4\1\6\1\5\1\45\1\47\1\26\1\24\1\40\1\15\1\23\1\17\1\20\3\21\3\22\1\41\1\43"+
    "\1\34\1\42\1\36\1\51\1\37\32\56\1\12\1\11\1\13\1\25\1\50\1\14\32\16\1\32\1"+
    "\35\1\33\1\46\6\0\1\54\24\0\1\7\12\0\1\7\4\0\1\7\5\0\27\7\1\0\12\7\4\0\14"+
    "\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3"+
    "\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10\0\6\7\1\0\26\7\2\0\1\7\6\0\10\7\10"+
    "\0\13\7\5\0\3\7\15\0\12\10\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\10\3\7\2\0"+
    "\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\10\6\7\4\0\2\7\4\0\1\7\5\0\6\7\4"+
    "\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7\3\0\1\7\2\0\1\7\7\0\12"+
    "\7\4\0\12\10\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0\1\7"+
    "\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7\17\0\4"+
    "\7\1\0\1\7\7\0\12\10\2\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0"+
    "\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1"+
    "\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0\3\7\5\0\4\7"+
    "\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\21\0\1\7\12\0\6\7\5\0\22\7\3\0"+
    "\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12\10\7\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1"+
    "\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\10\2\0\14\7\1\0\24\7\13\0"+
    "\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0"+
    "\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\0\10\7\7"+
    "\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\11\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\14"+
    "\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\10\3\0\3\7\11\0\4\7\1\0\4\7\3\0"+
    "\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0"+
    "\7\7\3\0\4\7\2\0\6\7\14\0\2\54\7\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7\1"+
    "\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4"+
    "\0\1\7\4\0\2\7\13\0\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\6\0\2\7"+
    "\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\10\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0"+
    "\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\10\5\7\1"+
    "\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1"+
    "\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1"+
    "\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16"+
    "\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0"+
    "\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13\0\12\10\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0"+
    "\4\7\1\0\17\7\1\0\2\7\14\0\3\7\4\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7"+
    "\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7"+
    "\2\0\10\7\1\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10"+
    "\7\2\0\22\10\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0"+
    "\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1"+
    "\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7"+
    "\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\5\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\5\44\2\45\1\46"+
    "\1\47\1\1\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\2\0\2\3\1\0\1\60\1\0\2\13"+
    "\1\0\1\61\1\0\1\62\1\63\1\64\1\65\1\66"+
    "\1\0\1\17\1\67\2\0\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\0\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\2\0\2\45\2\0\1\7"+
    "\2\0\1\13\2\0\1\127\1\130\2\0\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\0"+
    "\1\142\1\0\1\143\1\13\1\0\2\13\1\0\1\66"+
    "\1\0\1\13\1\0\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0120\0\u0210\0\u0240\0\u0120\0\u0120"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0120\0\u0450\0\u0120\0\u0120\0\u0480\0\u04b0"+
    "\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0120\0\u0690\0\u0120\0\u06c0\0\u0120\0\u06f0\0\u01b0"+
    "\0\u0720\0\u0120\0\u0750\0\u0780\0\u07b0\0\u0120\0\u0120\0\u07e0"+
    "\0\u0810\0\u0840\0\u0120\0\u0120\0\u0870\0\u0120\0\u0120\0\u0120"+
    "\0\u08a0\0\u08d0\0\u0120\0\u0900\0\u0930\0\u0120\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0ba0\0\u0120\0\u0120\0\u0bd0"+
    "\0\u0120\0\u0120\0\u0120\0\u0c00\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0c30\0\u0c60\0\u0c90\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0cc0\0\u0120\0\u0120\0\u0cf0\0\u0d20"+
    "\0\u0120\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0120\0\u0120\0\u0f00\0\u0f30\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0f60"+
    "\0\u0120\0\u0f90\0\u0120\0\u0fc0\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u0120\0\u1080\0\u10b0\0\u10e0\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\7"+
    "\1\16\1\17\1\20\1\21\1\22\1\15\1\23\1\24"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\0\1\11\1\15\1\11\4\57\1\60"+
    "\1\61\1\62\32\57\1\63\16\57\11\64\1\65\16\64"+
    "\1\66\27\64\1\67\2\70\1\71\50\67\1\0\1\71"+
    "\1\67\1\71\1\72\2\70\2\7\1\72\1\7\3\72"+
    "\2\7\11\72\1\7\1\72\1\7\1\73\7\7\2\72"+
    "\2\7\1\72\1\7\1\72\1\7\3\72\1\7\1\72"+
    "\1\0\1\72\1\7\1\74\2\70\1\75\50\74\1\0"+
    "\1\75\1\74\1\75\61\0\2\10\60\0\1\11\51\0"+
    "\1\11\1\0\1\11\5\0\1\76\57\0\1\77\34\0"+
    "\1\100\24\0\2\15\1\101\2\0\1\102\7\15\32\0"+
    "\1\15\2\0\1\103\1\104\7\0\1\105\54\0\1\15"+
    "\1\0\1\101\2\0\1\106\1\0\1\15\37\0\1\15"+
    "\6\0\1\107\6\0\1\110\1\22\1\0\5\22\1\111"+
    "\40\0\1\107\6\0\1\110\1\25\1\0\5\25\1\111"+
    "\1\112\37\0\1\107\6\0\1\110\1\25\1\0\3\25"+
    "\1\22\1\25\1\111\1\112\37\0\1\107\6\0\1\110"+
    "\1\22\1\0\5\22\1\111\1\112\37\0\1\107\6\0"+
    "\1\110\1\25\1\0\5\25\1\111\50\0\1\111\1\0"+
    "\5\111\1\113\74\0\1\114\1\115\43\0\1\116\7\0"+
    "\1\117\3\0\1\120\24\0\1\121\1\0\1\122\3\0"+
    "\1\123\1\121\5\123\3\0\1\124\1\125\25\0\1\121"+
    "\32\0\1\34\54\0\1\126\5\0\1\127\1\130\1\131"+
    "\3\0\1\132\52\0\1\133\1\134\57\0\1\135\3\0"+
    "\1\136\22\0\1\137\31\0\1\140\25\0\1\141\16\0"+
    "\1\142\12\0\1\143\1\144\1\145\1\146\1\147\52\0"+
    "\1\150\2\0\1\151\1\152\41\0\1\153\15\0\1\154"+
    "\1\0\1\155\56\0\1\156\56\0\1\157\57\0\1\160"+
    "\2\0\1\161\60\0\1\162\35\0\1\163\23\0\1\164"+
    "\61\0\1\165\5\0\4\57\3\0\32\57\1\0\16\57"+
    "\6\0\1\166\112\0\1\167\14\0\1\170\1\0\11\64"+
    "\1\0\16\64\1\0\27\64\1\0\1\171\1\172\6\0"+
    "\1\171\1\173\15\0\1\171\30\0\2\70\60\0\1\71"+
    "\51\0\1\71\1\0\1\71\1\72\4\0\1\72\1\0"+
    "\3\72\2\0\11\72\1\0\1\72\11\0\2\72\2\0"+
    "\1\72\1\0\1\72\1\0\3\72\1\0\1\72\1\0"+
    "\1\72\4\0\1\75\51\0\1\75\1\0\1\75\12\0"+
    "\1\105\54\0\1\15\1\0\1\101\4\0\1\15\37\0"+
    "\1\15\2\0\1\103\65\0\1\174\3\0\1\175\2\0"+
    "\1\174\37\0\1\174\26\0\1\176\37\0\1\107\6\0"+
    "\1\177\1\200\1\0\5\200\1\201\40\0\1\107\6\0"+
    "\1\110\1\111\1\0\5\111\61\0\1\202\56\0\1\203"+
    "\75\0\1\204\24\0\2\121\4\0\7\121\32\0\1\121"+
    "\13\0\1\205\62\0\1\123\1\0\5\123\51\0\1\124"+
    "\1\0\5\124\43\0\1\206\6\0\1\206\37\0\1\206"+
    "\37\0\1\207\57\0\1\210\60\0\1\211\44\0\1\212"+
    "\12\0\1\213\35\0\1\214\1\0\5\214\76\0\1\215"+
    "\57\0\1\216\65\0\1\217\65\0\1\220\17\0\1\170"+
    "\22\0\1\221\14\0\2\170\1\0\1\171\65\0\1\222"+
    "\3\0\1\223\2\0\1\222\37\0\1\222\10\0\2\174"+
    "\2\0\1\175\1\0\7\174\32\0\1\174\10\0\1\15"+
    "\1\0\1\101\2\0\1\102\1\0\1\15\37\0\1\15"+
    "\16\0\1\224\1\0\5\224\2\0\1\225\46\0\1\200"+
    "\1\0\5\200\1\201\40\0\1\107\7\0\1\200\1\0"+
    "\5\200\1\226\50\0\1\226\1\0\5\226\51\0\7\227"+
    "\32\0\1\227\10\0\1\230\6\0\1\230\37\0\1\230"+
    "\10\0\2\206\4\0\7\206\4\0\1\231\25\0\1\206"+
    "\17\0\1\220\22\0\1\232\14\0\1\220\10\0\2\222"+
    "\2\0\1\223\1\0\7\222\32\0\1\222\16\0\1\224"+
    "\1\0\5\224\41\0\1\107\7\0\1\226\1\0\5\226"+
    "\50\0\1\110\7\227\1\233\31\0\1\227\10\0\2\230"+
    "\1\234\3\0\7\230\32\0\1\230\42\0\1\235\32\0"+
    "\1\110\7\233\32\0\1\233\14\0\1\231\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\1\11\2\1\2\11\12\1\1\11"+
    "\1\1\2\11\13\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\3\1\2\11\3\1\2\11\1\1\3\11"+
    "\2\0\1\11\1\1\1\0\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\4\11\1\1\1\0\2\1\2\0\6\11"+
    "\1\1\2\11\1\1\3\11\1\1\6\11\2\1\1\0"+
    "\6\11\1\1\2\11\2\0\1\11\1\1\2\0\1\1"+
    "\2\0\1\1\2\0\2\11\2\0\11\11\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\2\1\1\0\1\11\1\0"+
    "\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    private final LinkedList<Integer> states = new LinkedList<Integer>();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _MathematicaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return MathematicaElementTypes.BAD_CHARACTER;
            }
          case 101: break;
          case 2: 
            { return MathematicaElementTypes.LINE_BREAK;
            }
          case 102: break;
          case 3: 
            { return MathematicaElementTypes.WHITE_SPACE;
            }
          case 103: break;
          case 4: 
            { return MathematicaElementTypes.LEFT_PAR;
            }
          case 104: break;
          case 5: 
            { return MathematicaElementTypes.TIMES;
            }
          case 105: break;
          case 6: 
            { return MathematicaElementTypes.RIGHT_PAR;
            }
          case 106: break;
          case 7: 
            { return MathematicaElementTypes.IDENTIFIER;
            }
          case 107: break;
          case 8: 
            { return MathematicaElementTypes.LEFT_BRACKET;
            }
          case 108: break;
          case 9: 
            { return MathematicaElementTypes.RIGHT_BRACKET;
            }
          case 109: break;
          case 10: 
            { return MathematicaElementTypes.BACK_TICK;
            }
          case 110: break;
          case 11: 
            { return MathematicaElementTypes.NUMBER;
            }
          case 111: break;
          case 12: 
            { return MathematicaElementTypes.POINT;
            }
          case 112: break;
          case 13: 
            { return MathematicaElementTypes.POWER;
            }
          case 113: break;
          case 14: 
            { return MathematicaElementTypes.MINUS;
            }
          case 114: break;
          case 15: 
            { return MathematicaElementTypes.SLOT;
            }
          case 115: break;
          case 16: 
            { yypushstate(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
            }
          case 116: break;
          case 17: 
            { return MathematicaElementTypes.OUT;
            }
          case 117: break;
          case 18: 
            { return MathematicaElementTypes.LEFT_BRACE;
            }
          case 118: break;
          case 19: 
            { return MathematicaElementTypes.RIGHT_BRACE;
            }
          case 119: break;
          case 20: 
            { return MathematicaElementTypes.LESS;
            }
          case 120: break;
          case 21: 
            { return MathematicaElementTypes.ALTERNATIVE;
            }
          case 121: break;
          case 22: 
            { return MathematicaElementTypes.GREATER;
            }
          case 122: break;
          case 23: 
            { return MathematicaElementTypes.PREFIX_CALL;
            }
          case 123: break;
          case 24: 
            { return MathematicaElementTypes.DIVIDE;
            }
          case 124: break;
          case 25: 
            { return MathematicaElementTypes.COLON;
            }
          case 125: break;
          case 26: 
            { return MathematicaElementTypes.SET;
            }
          case 126: break;
          case 27: 
            { return MathematicaElementTypes.SEMICOLON;
            }
          case 127: break;
          case 28: 
            { return MathematicaElementTypes.EXCLAMATION_MARK;
            }
          case 128: break;
          case 29: 
            { return MathematicaElementTypes.PLUS;
            }
          case 129: break;
          case 30: 
            { return MathematicaElementTypes.INFIX_CALL;
            }
          case 130: break;
          case 31: 
            { return MathematicaElementTypes.COMMA;
            }
          case 131: break;
          case 32: 
            { return MathematicaElementTypes.BLANK;
            }
          case 132: break;
          case 33: 
            { return MathematicaElementTypes.QUESTION_MARK;
            }
          case 133: break;
          case 34: 
            { return MathematicaElementTypes.FUNCTION;
            }
          case 134: break;
          case 35: 
            { return MathematicaElementTypes.DERIVATIVE;
            }
          case 135: break;
          case 36: 
            { return MathematicaElementTypes.COMMENT_CONTENT;
            }
          case 136: break;
          case 37: 
            { return MathematicaElementTypes.STRING_LITERAL;
            }
          case 137: break;
          case 38: 
            { yypopstate(); return MathematicaElementTypes.STRING_LITERAL_END;
            }
          case 138: break;
          case 39: 
            { yypushback(1); yybegin(PUT_RHS);
            }
          case 139: break;
          case 40: 
            { yybegin(PUT_RHS); return MathematicaElementTypes.WHITE_SPACE;
            }
          case 140: break;
          case 41: 
            { yybegin(YYINITIAL); return MathematicaElementTypes.STRINGIFIED_IDENTIFIER;
            }
          case 141: break;
          case 42: 
            { yybegin(YYINITIAL); yypushstate(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
            }
          case 142: break;
          case 43: 
            { yypushback(1); yybegin(GET_RHS);
            }
          case 143: break;
          case 44: 
            { yybegin(GET_RHS); return MathematicaElementTypes.WHITE_SPACE;
            }
          case 144: break;
          case 45: 
            { yypushstate(IN_COMMENT); return MathematicaElementTypes.COMMENT_START;
            }
          case 145: break;
          case 46: 
            { return MathematicaElementTypes.NON_COMMUTATIVE_MULTIPLY;
            }
          case 146: break;
          case 47: 
            { return MathematicaElementTypes.TIMES_BY;
            }
          case 147: break;
          case 48: 
            { return MathematicaElementTypes.ACCURACY;
            }
          case 148: break;
          case 49: 
            { return MathematicaElementTypes.REPEATED;
            }
          case 149: break;
          case 50: 
            { return MathematicaElementTypes.UP_SET;
            }
          case 150: break;
          case 51: 
            { return MathematicaElementTypes.DECREMENT;
            }
          case 151: break;
          case 52: 
            { return MathematicaElementTypes.RULE;
            }
          case 152: break;
          case 53: 
            { return MathematicaElementTypes.SUBTRACT_FROM;
            }
          case 153: break;
          case 54: 
            { return MathematicaElementTypes.ASSOCIATION_SLOT;
            }
          case 154: break;
          case 55: 
            { return MathematicaElementTypes.SLOT_SEQUENCE;
            }
          case 155: break;
          case 56: 
            { yybegin(GET_START); return MathematicaElementTypes.GET;
            }
          case 156: break;
          case 57: 
            { return MathematicaElementTypes.LEFT_ASSOCIATION;
            }
          case 157: break;
          case 58: 
            { return MathematicaElementTypes.STRING_JOIN;
            }
          case 158: break;
          case 59: 
            { return MathematicaElementTypes.LESS_EQUAL;
            }
          case 159: break;
          case 60: 
            { return MathematicaElementTypes.OR;
            }
          case 160: break;
          case 61: 
            { return MathematicaElementTypes.RIGHT_ASSOCIATION;
            }
          case 161: break;
          case 62: 
            { yybegin(PUT_START); return MathematicaElementTypes.PUT;
            }
          case 162: break;
          case 63: 
            { return MathematicaElementTypes.GREATER_EQUAL;
            }
          case 163: break;
          case 64: 
            { return MathematicaElementTypes.COMPOSITION;
            }
          case 164: break;
          case 65: 
            { return MathematicaElementTypes.APPLY;
            }
          case 165: break;
          case 66: 
            { return MathematicaElementTypes.RIGHT_COMPOSITION;
            }
          case 166: break;
          case 67: 
            { return MathematicaElementTypes.REPLACE_ALL;
            }
          case 167: break;
          case 68: 
            { return MathematicaElementTypes.MAP;
            }
          case 168: break;
          case 69: 
            { return MathematicaElementTypes.POSTFIX;
            }
          case 169: break;
          case 70: 
            { return MathematicaElementTypes.TAG_SET;
            }
          case 170: break;
          case 71: 
            { return MathematicaElementTypes.DIVIDE_BY;
            }
          case 171: break;
          case 72: 
            { return MathematicaElementTypes.CONDITION;
            }
          case 172: break;
          case 73: 
            { return MathematicaElementTypes.RULE_DELAYED;
            }
          case 173: break;
          case 74: 
            { return MathematicaElementTypes.DOUBLE_COLON;
            }
          case 174: break;
          case 75: 
            { return MathematicaElementTypes.SET_DELAYED;
            }
          case 175: break;
          case 76: 
            { return MathematicaElementTypes.UNSET;
            }
          case 176: break;
          case 77: 
            { return MathematicaElementTypes.EQUAL;
            }
          case 177: break;
          case 78: 
            { return MathematicaElementTypes.SPAN;
            }
          case 178: break;
          case 79: 
            { return MathematicaElementTypes.UNEQUAL;
            }
          case 179: break;
          case 80: 
            { return MathematicaElementTypes.ADD_TO;
            }
          case 180: break;
          case 81: 
            { return MathematicaElementTypes.INCREMENT;
            }
          case 181: break;
          case 82: 
            { return MathematicaElementTypes.STRING_EXPRESSION;
            }
          case 182: break;
          case 83: 
            { return MathematicaElementTypes.DEFAULT;
            }
          case 183: break;
          case 84: 
            { return MathematicaElementTypes.BLANK_SEQUENCE;
            }
          case 184: break;
          case 85: 
            { return MathematicaElementTypes.AND;
            }
          case 185: break;
          case 86: 
            { yypopstate(); return MathematicaElementTypes.COMMENT_END;
            }
          case 186: break;
          case 87: 
            { return MathematicaElementTypes.REPEATED_NULL;
            }
          case 187: break;
          case 88: 
            { return MathematicaElementTypes.UP_SET_DELAYED;
            }
          case 188: break;
          case 89: 
            { return MathematicaElementTypes.UNDIRECTED_EDGE;
            }
          case 189: break;
          case 90: 
            { yybegin(PUT_START); return MathematicaElementTypes.PUT_APPEND;
            }
          case 190: break;
          case 91: 
            { return MathematicaElementTypes.APPLY1;
            }
          case 191: break;
          case 92: 
            { return MathematicaElementTypes.REPLACE_REPEATED;
            }
          case 192: break;
          case 93: 
            { return MathematicaElementTypes.MAP_ALL;
            }
          case 193: break;
          case 94: 
            { yypushback(2); return MathematicaElementTypes.SET;
            }
          case 194: break;
          case 95: 
            { return MathematicaElementTypes.SAME_Q;
            }
          case 195: break;
          case 96: 
            { return MathematicaElementTypes.UNSAME_Q;
            }
          case 196: break;
          case 97: 
            { return MathematicaElementTypes.BLANK_NULL_SEQUENCE;
            }
          case 197: break;
          case 98: 
            { return MathematicaElementTypes.COMMENT_ANNOTATION;
            }
          case 198: break;
          case 99: 
            { return MathematicaElementTypes.STRING_NAMED_CHARACTER;
            }
          case 199: break;
          case 100: 
            { return MathematicaElementTypes.COMMENT_SECTION;
            }
          case 200: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
